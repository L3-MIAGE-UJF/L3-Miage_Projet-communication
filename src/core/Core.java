package core;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import core.pcore.CoreApp;

/**
*
* DO NOT EDIT THIS FILE IT BELONG TO THE FRAMEWORK
* 
* Core constitue le seul Èlement ne s'integrant pas dans la logique de modules
* respectant un pattern MVC simplifie.
* 
* Core contient le main de l'application, ce dernier a pour role d'instancier tout les
* modules souhaites par le developpeur.
* Une fois les modules instancies le main donne la main a mainApp() defini par le developpeur
* dans CoreApp.
* 
* pnodes correspond aux modules personnels concu par le developpeur, a l'opposition de onodes
* qui contient des modules de base internes au framework.
*
*
* A noter, il faut preciser les parametres suivants lors du lancement de l'application
* ou dans les parametres de la VM java
* 
* -Djava.security.policy=/path/client_security.policy -Djava.security.policy=/path/server_security.policy
* 
* @author groupe1
*
*/
public class Core {
	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		System.out.println("\n>>> ================================= <<<");
		System.out.println(">>> Main Core : Lancement des modules <<<");
		System.out.println(">>> ================================= <<<\n");
			
		/*
		 * Declaration des fichiers de configuration contenant la liste des modules a activer
		 */
		File file = new File("D:\\Desktop\\projetcom\\projet-com\\src\\config\\activated_controller.list");
		HashSet<String> activated_controller_set = null;
		
		/*
		 * Parse of listing files
		 */
		activated_controller_set=parseListController(file);
		
		/*
		 * Instantiation of listed nodes
		 */
		
		if (instantiateListedNodes(activated_controller_set)) {
			System.out.println("\n>>> Main Core : Tout les modules on √©t√©s correctement instanci√©s");
		}
		else {
			System.err.println(">>> Main Core : Erreur certains modules n'ont pas √©t√©s instanci√©s");
		}
		
		/*
		 * Execution of the mainApp() written by devOps
		 */
		System.out.println("\n>>> ======================== <<<");
		System.out.println(">>> Main CoreApp : Lancement <<<");
		System.out.println(">>> ======================== <<<\n");
		
		CoreApp.mainApp(args);
	}

	/**
	 * 
	 * @param activated_model_set
	 * @return
	 */
	private static boolean instantiateListedNodes(HashSet<String> activated_controller_set) {
		boolean ret = true;
	    Iterator<String> iaControllerSet=activated_controller_set.iterator();
	    String currentModel = null;
	    
	    while(iaControllerSet.hasNext()) {
			try {
				currentModel=iaControllerSet.next();
				Class<?> exemple = Class.forName(currentModel);
				//Model modele = (Model) exemple.newInstance();
				exemple.newInstance();
			} catch (InstantiationException | IllegalAccessException e) {
				System.err.println("Main Core : InstantiationException or IllegalAccessException : "+currentModel);
				e.getMessage();
				ret=false;
			} catch (ClassNotFoundException e) {
				System.err.println("Main Core : ClassNotFoundException : "+currentModel);
				e.getMessage();
				ret=false;
			}
	    }
		return ret;
	}

	/**
	 * 
	 * @param activated_model_file
	 * @return
	 */
	private static HashSet<String> parseListController(File activated_controller_set) {
		HashSet<String> setListController = new HashSet<String>();
		
		/*
		 * FileInputStream is used for reading streams of raw bytes of data, like raw images.
		 * FileReaders, on the other hand, are used for reading streams of characters
		 * The difference between FileInputStream and FileReader is,
		 * FileInputStream reads the file byte by byte and FileReader reads the file character by character.
		 */
		
		try (BufferedReader br = new BufferedReader(new FileReader(activated_controller_set))) {
			/*
			 * D√©claration des variables n√©cessaires pour l'utilisation de test avec expressions r√©guli√®res
			 */
		    String line = null;
		    String patternCom = "(^#)(.)*"; 
			
		    Pattern regPatCom = Pattern.compile(patternCom, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
		    Matcher matcher = null;
		    
		    while ((line = br.readLine()) != null) {		    	
				line = line.trim();
				matcher = regPatCom.matcher(line);
				if (!matcher.matches() && !line.isEmpty()) {
					setListController.add(line); //"onodes."+
				}
		    }
		} catch (FileNotFoundException e) {
			System.err.println("Main Core : parseListModel : FileNotFoundException");
			e.getMessage();
		} catch (IOException e) {
			System.err.println("Main Core : parseListModel : IOException");
			e.getMessage();
		}
		
		return setListController;
	}
}
