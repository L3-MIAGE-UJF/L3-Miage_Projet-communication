package onodes.RMI.Server;

import java.rmi.RemoteException;

import onodes.Controller;
import onodes.RMI.ControllerRMI;

/**
 *
 * DO NOT EDIT THIS FILE IT BELONG TO THE FRAMEWORK
 *
 * Ce module defini les elements necessaire pour pouvoir appeler une methode
 * sur une autre application en tant que serveur.
 * 
 * Le fonctionnement est tel que le developpeur n'a pas a redefinir un module RMI Serveur
 * pour son application.
 * Il suffit que dans ses modeles il instancie ce controlleur pour pouvoir appeller des methodes
 * sur une application client.
 * 
 * Cela se fait par le biais de invokeMethodOnAllControllerAppClient() le devellopeur 
 * appele cette methode en indiquant les caracteristiques de la methode qu'il souhaite
 * appeler sur le controleur de l'application client.
 * 
 * Ici les deux modules RMIServer et RMIClient servent "d'intermediaire" il ne font que
 * relayer la methode et le modele RMIClient instancie indirectement par l'application Client
 * tentera d'invoquer la methode sur le controlleur de l'application client. Dans le cas ou
 * elle existe sur ce dernier. 
 * 
 * Pour une utilisation simple il n'y a donc pas besoin de creer un module qui etend ce dernier.
 * 
 * @author groupe1
 *
 */

public class ControllerRMIServer<C extends Controller> extends ControllerRMI<ModelRMIServer, ViewRMIServer> {

	/**
	 * @param cappserv
	 * @throws RemoteException
	 */
	public ControllerRMIServer(C cappserv) throws RemoteException {
		super();
		model=new ModelRMIServer(cappserv);
		view=new ViewRMIServer();
	}
	
	/**
	 * @param cappserv
	 * @param ip
	 * @throws RemoteException
	 */
	public ControllerRMIServer(C cappserv, String ip) throws RemoteException {
		super();
		model=new ModelRMIServer(cappserv, ip);
		view=new ViewRMIServer();
	}

	/**
	 * @param methodName
	 * @param cArgs
	 * @param oArgs
	 */
	public void invokeMethodOnAllControllerAppClient(String methodName,
			Class[] cArgs, Object[] oArgs) {
		model.invokeMethodOnAllControllerAppClient(methodName, cArgs, oArgs);
	}
	
	/**
	 * @param idClient
	 * @param methodName
	 * @param cArgs
	 * @param oArgs
	 * @return
	 */
	public Object invokeMethodOnControllerAppClient (int idClient, String methodName,
			Class[] cArgs, Object[] oArgs) {
		return model.invokeMethodOnControllerAppClient(idClient, methodName, cArgs, oArgs);
	}
}
