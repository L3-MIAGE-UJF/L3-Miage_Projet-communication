package onodes.RMI.Client;

import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.RMISecurityManager;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.security.AccessControlException;

import onodes.RMI.ModelRMI;
import onodes.RMI.Server.ModelRMIServerRemote;

/**
 *
 * DO NOT EDIT THIS FILE IT BELONG TO THE FRAMEWORK
 * 
 * @author groupe1
 *
 */
public abstract class ModelRMIClient<MR extends ModelRMIServerRemote> extends
		UnicastRemoteObject implements ModelRMI, ModelRMIClientRemote {

	
	//TODO DEGEU
	protected MR serv;
	/**
	 * 
	 */
	private static final long serialVersionUID = 70109437196450691L;

	/**
	 * 
	 * @throws RemoteException
	 */
	public ModelRMIClient() throws RemoteException {
		super();
		launchClient("127.0.0.1");
	}

	/**
	 * 
	 * @param ip
	 * @throws RemoteException
	 */
	public ModelRMIClient(String ip) throws RemoteException {
		super();
		// TODO Match regexp of ip addr
		launchClient(ip);
	}

	/**
	 * 
	 * @param ip
	 */
	private void launchClient(String ip) {
		try {
			System.out
					.println("=================================================================");
			System.out.println("ModelRMIClient UID=" + serialVersionUID
					+ " : Lancement du client");

			if (System.getSecurityManager() == null) {
				System.setSecurityManager(new RMISecurityManager());
			}

			Remote r = Naming.lookup("rmi://" + ip + "/testRMIserver");

			if (r instanceof ModelRMIServerRemote) {
				String s = ((ModelRMIServerRemote) r).getInfoServer();
				System.out.println("ModelRMIClient UID=" + serialVersionUID
						+ " : chaine renvoyee = " + s);

				this.serv = (MR) r;
				// this.regOnServer(serv);
			} else {
				System.out.println("ModelRMIClient UID=" + serialVersionUID
						+ " : Instance incorrecte");
			}

			System.out.println("ModelRMIClient UID=" + serialVersionUID
					+ " : Client Lanc√©");
			System.out
					.println("=================================================================");
		} catch (RemoteException e) {
			System.err.println(e.getMessage());
		} catch (MalformedURLException e) {
			System.err.println(e.getMessage());
		} catch (AccessControlException e) {
			System.err.println(e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public String getInfoClient() throws RemoteException {
		return "Retour ModelRMIClient UID=" + serialVersionUID;
	}

	/**
	 * 
	 * @param serv
	 */
	/*
	 * public void regOnServer(MR serv) { try { serv.registerClient(this); }
	 * catch (RemoteException e) { e.printStackTrace(); } }
	 */
}