package onodes.RMI.Client;

import java.rmi.RemoteException;

import onodes.Controller;
import onodes.RMI.ControllerRMI;

/*
 * Besoin de conserver la même architecture de package dans Le serveur comme le client
 * afin que les classes puissent être trouvé lors du Naming.lookup()
 */

/**
 *
 * DO NOT EDIT THIS FILE IT BELONG TO THE FRAMEWORK
 * 
 * @author groupe1
 *
 */
public class ControllerRMIClient<C extends Controller> extends
		ControllerRMI<ModelRMIClient, ViewRMIClient> {

	/**
	 * @param controllerAppClient
	 * @throws RemoteException
	 */
	public ControllerRMIClient(C controllerAppClient) throws RemoteException {
		super();
		model=new ModelRMIClient(controllerAppClient);
	}
	
	/**
	 * @param controllerAppClient
	 * @param ip
	 * @throws RemoteException
	 */
	public ControllerRMIClient(C controllerAppClient, String ip) throws RemoteException {
		super();
		model=new ModelRMIClient(controllerAppClient, ip);
	}
	
	/**
	 * @param methodName
	 * @param cArgs
	 * @param oArgs
	 * @return
	 */
	public Object invokeMethodOnControllerAppServer(String methodName, Class[] cArgs, Object[] oArgs) {
		return model.invokeMethodOnControllerAppServer(methodName, cArgs, oArgs);
	}
}
